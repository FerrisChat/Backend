name: Rust

on:
  push:
    branches: [ "rewrite" ]
  pull_request:
    branches: [ "rewrite" ]

env:
  CARGO_TERM_COLOR: always
  # This is so it can pass workflows
  DATABASE_URL: none

jobs:
  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Move repository into its own directory
      run: mkdir Server && mv * Server
      continue-on-error: true

    - name: Clone FerrisChat Common crate
      uses: actions/checkout@v3
      with:
        repository: FerrisChat/Common
        path: Common
        ref: rewrite

    - name: Install latest nightly with rustfmt
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        override: true
        components: rustfmt

    - name: Check format
      run: cargo fmt --all -- --check
      working-directory: Server

  build:
    name: Build and Run Clippy
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Move repository into its own directory
      run: mkdir Server && mv * Server
      continue-on-error: true

    - name: Install latest nightly Rust toolchain with clippy
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        override: true
        components: clippy

    - name: Clone FerrisChat Common crate
      uses: actions/checkout@v3
      with:
        repository: FerrisChat/Common
        path: Common
        ref: rewrite

    - name: Setup cache
      uses: Swatinem/rust-cache@v1

    - name: Install sqlx-cli
      if: steps.rust-cache.outputs.cache-hit != 'true'
      run: cargo install sqlx-cli --no-default-features --features rustls,postgres

    - run: cargo sqlx mig run && cargo sqlx prepare
      env:
        DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/postgres"

    - name: Build
      run: cargo build --verbose
      working-directory: Server

    - name: Run clippy
      run: cargo clippy --workspace -- -D clippy::all -D clippy::pedantic -D clippy::nursery
      working-directory: Server